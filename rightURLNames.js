// Для базових URL іменники у множині - users, contacts
// Конкретні та чіткі імена news, videos, а не абстрактні items або elements.
// Складну логіку для URL необхідно описувати за рахунок додаткових властивостей, тобто, ховати за знаком ?
// Приклад використання пагінації: /users?limit=25&offset=50
// Приклад фільтрації відповіді: /friends?fields=id,name,picture

//~ Погані URLs:
// /api/users/13/remove
// /api/getusers
// /api/v1/users-get
// Використовуються дієслова, вказується видалення для /api/users/13/remove, а необхідно просто використовувати HTTP метод DELETE

//~ Правильний підхід:
// Додавання нового клієнта до системи:
// HTTP метод: POST
// URL: http://www.example.com/customers

// Отримати дані клієнта з ідентифікатором клієнта ID 112233:
// HTTP метод: GET
// URL: http://www.example.com/customers/112233
// Той самий URL ми використовуємо для HTTP методів PUT та DELETE для оновлення та видалення відповідно.

// Для читання, оновлення, видалення продукту з ID 432111, відповідно:
// HTTP метод: GET, PUT, DELETE
// URL: http://www.example.com/products/432111

// Створення нового продукту:
// HTTP метод: POST
// URL: http://www.example.com/products

// Створення нового замовлення для клієнта поза контекстом клієнта
// HTTP метод: POST
// URL: http://www.example.com/orders

// Створення того ж замовлення, але в контексті конкретного клієнта з ID 332244
// HTTP метод: POST
// URL: http://www.example.com/customers/332244/orders

// Список замовлень, що належать клієнту ID 332244:
// HTTP метод: GET
// URL: http://www.example.com/customers/332244/orders

// Нехай необхідний URL для додавання нової позиції на замовлення з ID 1234, для клієнта з ID 332244:
// HTTP метод: POST
// URL: http://www.example.com/customers/332244/orders/1234/lineorders

// Отримання списку замовлення за ID замовлення без знання ID конкретного клієнту
// HTTP метод: GET
// URL: http://www.example.com/orders/8769

// Пагінація проводиться через query рядок за допомогою параметра offset - це початковий номер позиції, та параметр limit - максимальна кількість елементів, що повертаються. Вони можуть називатися і інакше, наприклад skip, limit
// HTTP метод: GET
// URL: http://api.example.com/resources?offset=0&limit=25

// Складна фільтрація за значеннями. Можна використовувати роздільник подвійна двокрапка ::, яке відокремлює ім'я властивості від значення порівняння
// HTTP метод: GET
// URL: http://www.example.com/users?filter="name::sam|city::denver"

// Сортування. Один із способів, коли для кожної переданої властивості проводиться сортування в порядку зростання, а для кожної властивості, з префіксним тире ("-") сортування проводиться у порядку зменшення. Сепаратор для кожного імені властивості вертикальна смуга ("|")
// HTTP метод: GET
// URL: http://www.example.com/users?sort=lastName|firstName|-birthdate
